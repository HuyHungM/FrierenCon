const { EmbedBuilder } = require("discord.js");
const { CommandCategory } = require("../../utils/other.js");

const choices = ["b·∫ßu", "cua", "t√¥m", "c√°", "nai", "g√†"];

module.exports = {
  name: "baucua",
  aliases: ["bc"],
  category: CommandCategory.GAME,
  description: "Ch∆°i b·∫ßu cua",
  usage: "baucua <con v·∫≠t> <s·ªë ti·ªÅn>",
  run: async (client, message, args) => {
    if (args.length < 2)
      return message.reply(
        `${client.config.emotes.error} Vui l√≤ng th·ª±c hi·ªán theo c√∫ ph√°p ${
          process.env.BOT_PREFIX
        }baucua <${choices.join("/")} ...> <s·ªë ti·ªÅn>`
      );

    let betMoney = parseInt(args[args.length - 1]);
    if (isNaN(betMoney) || betMoney <= 0)
      return message.reply(
        `${client.config.emotes.error} Ti·ªÅn c∆∞·ª£c ph·∫£i l√† s·ªë d∆∞∆°ng.`
      );

    let betChoices = args.slice(0, -1).map((x) => x.toLowerCase());

    if (betChoices.length > 6)
      return message.reply(
        `${client.config.emotes.error} B·∫°n ch·ªâ ƒë∆∞·ª£c c∆∞·ª£c t·ªëi ƒëa 6 con!`
      );

    if (!betChoices.every((x) => choices.includes(x)))
      return message.reply(
        `${client.config.emotes.error} Con h·ª£p l·ªá: ${choices
          .map((c) => `**${c}**`)
          .join(", ")}`
      );

    let bankData = await client.bank.find({ userID: message.author.id });
    if (!bankData)
      bankData = await client.bank.create({ userID: message.author.id });

    let neededMoney = betMoney * betChoices.length;
    if (neededMoney > parseInt(bankData.money))
      return message.reply(
        `üí∏ B·∫°n c·∫ßn **${neededMoney.toLocaleString("vi-VN")} VNƒê** ƒë·ªÉ c∆∞·ª£c ${
          betChoices.length
        } con, nh∆∞ng ch·ªâ c√≥ **${bankData.money} VNƒê**!`
      );

    const loadingEmbed = new EmbedBuilder({
      description: ":hourglass_flowing_sand: **ƒêang ch·ªù...**",
    }).setColor(client.config.getEmbedConfig().color);

    let loadingMessage = await message.channel.send({ embeds: [loadingEmbed] });

    setTimeout(async () => {
      let result = [];
      for (let i = 0; i < 3; i++) {
        result.push(choices[Math.floor(Math.random() * choices.length)]);
      }

      let totalWin = 0;
      let detail = [];

      for (let bet of betChoices) {
        let count = result.filter((x) => x === bet).length;
        if (count > 0) {
          let winMoney = betMoney * count;
          totalWin += winMoney;
          detail.push(
            `${
              client.config.emotes.success
            } ${bet}: tr√∫ng **x${count}**, **+${winMoney.toLocaleString(
              "vi-VN"
            )} VNƒê**`
          );
        } else {
          totalWin -= betMoney;
          detail.push(
            `${
              client.config.emotes.error
            } ${bet}: kh√¥ng tr√∫ng, **-${betMoney.toLocaleString("vi-VN")} VNƒê**`
          );
        }
      }

      let newBank = await client.bank.update({
        userID: message.author.id,
        money: totalWin,
      });

      const embed = new EmbedBuilder()
        .setTitle("üé≤ B·∫ßu Cua")
        .setDescription(
          `B·∫°n ch·ªçn: **${betChoices.join(", ")}**
Ti·ªÅn m·ªói con: **${betMoney.toLocaleString("vi-VN")} VNƒê**
T·ªïng c∆∞·ª£c: **${neededMoney.toLocaleString("vi-VN")} VNƒê**
K·∫øt qu·∫£: **${result.join(" | ")}**

${detail.join("\n")}

üí≥ S·ªë d∆∞ hi·ªán t·∫°i: **${newBank.money.toLocaleString("vi-VN")} VNƒê**`
        )
        .setColor(client.config.getEmbedConfig().color)
        .setTimestamp();

      loadingMessage.edit({ embeds: [embed] });
    }, 1500);
  },
};
